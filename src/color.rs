use palette::{Hsv, Lab, LinSrgb};

#[derive(Copy, Clone, Debug, Default, PartialEq)]
pub struct RGBColor(pub u8, pub u8, pub u8);

impl RGBColor {
    pub fn new(red: u8, green: u8, blue: u8) -> Self {
        RGBColor(red, green, blue)
    }

    /// Calculate the nearest RGB color from HSV (each value from 0-1, with hue wrapping)
    pub fn from_hsv(h: f32, s: f32, v: f32) -> RGBColor {
        let rgb: LinSrgb = Hsv::new(h * 360f32, s, v).into();

        let to_int = |f: f32| (f * 255f32) as u8;

        RGBColor(to_int(rgb.red), to_int(rgb.green), to_int(rgb.blue))
    }

    /// Use the 3D nearest neighbor to determine and approximation for the RGB color.
    pub fn nearest_midi(&self) -> u8 {
        let mut furthest_val = 0usize;
        let mut furthest_dist = 3f32 * (255f32).powi(2) + 1f32; // maximum in all channels + 1

        let color_a = rgb_to_lab(&self);

        // calculate the LAB distance (delta e)
        // learn more: https://zschuessler.github.io/DeltaE/learn/

        for (i, color) in RGB_PALETTE.iter().enumerate() {
            // TODO palette LAB colors could be hardcoded...
            let color_b = rgb_to_lab(color);

            let distance = (color_a.l - color_b.l).powi(2)
                + (color_a.a - color_b.a).powi(2)
                + (color_a.b - color_b.b).powi(2);

            if distance < furthest_dist {
                furthest_dist = distance;
                furthest_val = i;
            }
        }

        return furthest_val as u8;
    }
}

fn rgb_to_lab(color: &RGBColor) -> Lab {
    let to_float = |i: u8| i as f32 / 255f32;
    LinSrgb::new(to_float(color.0), to_float(color.1), to_float(color.2)).into()
}

/// Palette table information from http://launchpaddr.com/mk2palette/
pub const RGB_PALETTE: [RGBColor; 128] = [
    // 0..64
    RGBColor(0x00, 0x00, 0x00),
    RGBColor(0x1c, 0x1c, 0x1c),
    RGBColor(0x7c, 0x7c, 0x7c),
    RGBColor(0xfc, 0xfc, 0xfc),
    RGBColor(0xff, 0x4e, 0x48),
    RGBColor(0xfe, 0x0a, 0x00),
    RGBColor(0x5a, 0x00, 0x00),
    RGBColor(0x18, 0x00, 0x02),
    RGBColor(0xff, 0xbc, 0x63),
    RGBColor(0xff, 0x57, 0x00),
    RGBColor(0x5a, 0x1d, 0x00),
    RGBColor(0x24, 0x18, 0x02),
    RGBColor(0xfd, 0xfd, 0x21),
    RGBColor(0xfd, 0xfd, 0x00),
    RGBColor(0x58, 0x58, 0x00),
    RGBColor(0x18, 0x18, 0x00),
    RGBColor(0x81, 0xfd, 0x2b),
    RGBColor(0x40, 0xfd, 0x01),
    RGBColor(0x16, 0x58, 0x00),
    RGBColor(0x13, 0x28, 0x01),
    RGBColor(0x35, 0xfd, 0x2b),
    RGBColor(0x00, 0xfe, 0x00),
    RGBColor(0x00, 0x58, 0x01),
    RGBColor(0x00, 0x18, 0x00),
    RGBColor(0x35, 0xfc, 0x47),
    RGBColor(0x00, 0xfe, 0x00),
    RGBColor(0x00, 0x58, 0x01),
    RGBColor(0x00, 0x18, 0x00),
    RGBColor(0x32, 0xfd, 0x7f),
    RGBColor(0x00, 0xfd, 0x3a),
    RGBColor(0x01, 0x58, 0x14),
    RGBColor(0x00, 0x1c, 0x0e),
    RGBColor(0x2f, 0xfc, 0xb1),
    RGBColor(0x00, 0xfb, 0x91),
    RGBColor(0x01, 0x57, 0x32),
    RGBColor(0x01, 0x18, 0x10),
    RGBColor(0x39, 0xbe, 0xff),
    RGBColor(0x00, 0xa7, 0xff),
    RGBColor(0x01, 0x40, 0x51),
    RGBColor(0x00, 0x10, 0x18),
    RGBColor(0x41, 0x86, 0xff),
    RGBColor(0x00, 0x50, 0xff),
    RGBColor(0x01, 0x1a, 0x5a),
    RGBColor(0x01, 0x06, 0x19),
    RGBColor(0x47, 0x47, 0xff),
    RGBColor(0x00, 0x00, 0xfe),
    RGBColor(0x00, 0x00, 0x5a),
    RGBColor(0x00, 0x00, 0x18),
    RGBColor(0x83, 0x47, 0xff),
    RGBColor(0x50, 0x00, 0xff),
    RGBColor(0x16, 0x00, 0x67),
    RGBColor(0x0a, 0x00, 0x32),
    RGBColor(0xff, 0x48, 0xfe),
    RGBColor(0xff, 0x00, 0xfe),
    RGBColor(0x5a, 0x00, 0x5a),
    RGBColor(0x18, 0x00, 0x18),
    RGBColor(0xfb, 0x4e, 0x83),
    RGBColor(0xff, 0x07, 0x53),
    RGBColor(0x5a, 0x02, 0x1b),
    RGBColor(0x21, 0x01, 0x10),
    RGBColor(0xff, 0x19, 0x01),
    RGBColor(0x9a, 0x35, 0x00),
    RGBColor(0x7a, 0x51, 0x01),
    RGBColor(0x3e, 0x65, 0x00),
    // 64..128
    RGBColor(0x01, 0x38, 0x00),
    RGBColor(0x00, 0x54, 0x32),
    RGBColor(0x00, 0x53, 0x7f),
    RGBColor(0x00, 0x00, 0xfe),
    RGBColor(0x01, 0x44, 0x4d),
    RGBColor(0x1a, 0x00, 0xd1),
    RGBColor(0x7c, 0x7c, 0x7c),
    RGBColor(0x20, 0x20, 0x20),
    RGBColor(0xff, 0x0a, 0x00),
    RGBColor(0xba, 0xfd, 0x00),
    RGBColor(0xac, 0xec, 0x00),
    RGBColor(0x56, 0xfd, 0x00),
    RGBColor(0x00, 0x88, 0x00),
    RGBColor(0x01, 0xfc, 0x7b),
    RGBColor(0x00, 0xa7, 0xff),
    RGBColor(0x02, 0x1a, 0xff),
    RGBColor(0x35, 0x00, 0xff),
    RGBColor(0x78, 0x00, 0xff),
    RGBColor(0xb4, 0x17, 0x7e),
    RGBColor(0x41, 0x20, 0x00),
    RGBColor(0xff, 0x4a, 0x01),
    RGBColor(0x82, 0xe1, 0x00),
    RGBColor(0x66, 0xfd, 0x00),
    RGBColor(0x00, 0xfe, 0x00),
    RGBColor(0x00, 0xfe, 0x00),
    RGBColor(0x45, 0xfd, 0x61),
    RGBColor(0x01, 0xfb, 0xcb),
    RGBColor(0x50, 0x86, 0xff),
    RGBColor(0x27, 0x4d, 0xc8),
    RGBColor(0x84, 0x7a, 0xed),
    RGBColor(0xd3, 0x0c, 0xff),
    RGBColor(0xff, 0x06, 0x5a),
    RGBColor(0xff, 0x7d, 0x01),
    RGBColor(0xb8, 0xb1, 0x00),
    RGBColor(0x8a, 0xfd, 0x00),
    RGBColor(0x81, 0x5d, 0x00),
    RGBColor(0x3a, 0x28, 0x02),
    RGBColor(0x0d, 0x4c, 0x05),
    RGBColor(0x00, 0x50, 0x37),
    RGBColor(0x13, 0x14, 0x29),
    RGBColor(0x10, 0x1f, 0x5a),
    RGBColor(0x6a, 0x3c, 0x18),
    RGBColor(0xac, 0x04, 0x01),
    RGBColor(0xe1, 0x51, 0x36),
    RGBColor(0xdc, 0x69, 0x00),
    RGBColor(0xfe, 0xe1, 0x00),
    RGBColor(0x99, 0xe1, 0x01),
    RGBColor(0x60, 0xb5, 0x00),
    RGBColor(0x1b, 0x1c, 0x31),
    RGBColor(0xdc, 0xfd, 0x54),
    RGBColor(0x76, 0xfb, 0xb9),
    RGBColor(0x96, 0x98, 0xff),
    RGBColor(0x8b, 0x62, 0xff),
    RGBColor(0x40, 0x40, 0x40),
    RGBColor(0x74, 0x74, 0x74),
    RGBColor(0xde, 0xfc, 0xfc),
    RGBColor(0xa2, 0x04, 0x01),
    RGBColor(0x34, 0x01, 0x00),
    RGBColor(0x00, 0xd2, 0x01),
    RGBColor(0x00, 0x41, 0x01),
    RGBColor(0xb8, 0xb1, 0x00),
    RGBColor(0x3c, 0x30, 0x00),
    RGBColor(0xb4, 0x5d, 0x00),
    RGBColor(0x4c, 0x13, 0x00),
];
